unbind-key C-b
set -g prefix `
# set -g prefix M-Space #set -g prefix C-Space # bind-key ` send-prefix
# Use prefix-space to enter copy mode instead of prefix-[
bind Space copy-mode

# Don't rename windows automatically
set-option -g allow-rename off
# But do renumber them (ex: closing window 1 with windows 0, 1, 2)
set-option -g renumber-windows on

# Don't allow repeat of keys (affects select-pane, resize-pane) b/c it makes changing panes and then quickly typing be interpreted as commands
set-option -g repeat-time 0

# Only shink window if smaller screen is watching it
set-window-option -g aggressive-resize off
set-window-option -g xterm-keys on

# Use the current directory when creating a window
bind c new-window -c "#{pane_current_path}"
#faster zoom key
bind j resize-pane -Z
bind k choose-tree -Zs
bind n next-layout

bind d detach

# Split panes using | or -; use the current directory when creating a new pane
bind \\ split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# Scroll w/ mouse
#setw -g mouse
set -g mouse on
#set-option -g mode-mouse on
#set-option -g mouse on

bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
#bind-key -t vi-copy WheelUpPane scroll-up
#bind-key -t vi-copy WheelDownPane scroll-down

# Toggle mouse on
bind m \
    set -g mouse on \;\
    display 'Mouse: ON'

# Toggle mouse off
bind M \
    set -g mouse off \;\
    display 'Mouse: OFF'

# Start copy mode when scrolling up or down
#bind -n WheelUpPane copy-mode
#bind -n WheelDownPane copy-mode

# Enable our custom option to exit copy mode when scrolling past bottom
#set-window-option -g exit-copy-past-bottom on


# Smart pane switching with awareness of vim splits # See: https://github.com/christoomey/vim-tmux-navigator
#is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
#is_vim='`echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"` || `echo "#{pane_start_command}" | grep -iqE "fzf"` || `echo "#{pane_current_command}" | grep -iqE "fzf"`'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(g?(view|n?vim?x?)(diff)?|fzf)$'"
#is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n S-UP if-shell "$is_vim" "send-keys S-Up" "resize-pane -U"
bind-key -n S-DOWN if-shell "$is_vim" "send-keys S-Down" "resize-pane -D"
bind-key -n S-LEFT if-shell "$is_vim" "send-keys S-Left" "resize-pane -L"
bind-key -n S-RIGHT if-shell "$is_vim" "send-keys S-Right" "resize-pane -R"
#bind -n S-RIGHT if-shell "$is_vim" "send-keys [1;2C" "resize-pane -R"

#+----------------------------------------------------------------+
#| From https://github.com/terryma/dotfiles/blob/master/.tmux.conf|
#+----------------------------------------------------------------+
# Ctrl-Q: Detach
bind C-Q detach-client

# ;: Command prompt
bind \; command-prompt

# /: List keys
bind / list-keys

# Ctrl-Arrow: Shitty Resize panes
#bind -r C-Up resize-pane -U #bind -r C-Down resize-pane -D #bind -r C-Left resize-pane -L #bind -r C-Right resize-pane -R #bind -n C-Up resize-pane -U #bind -n C-Down resize-pane -D #bind -n C-Left resize-pane -L #bind -n C-Right resize-pane -R #bind -r C-Left resize-pane -L #bind -r C-Right resize-pane -R


#######################
# Tmux Plugin Manager #
#######################

# List of plugins
#set -g @plugin 'seebi/tmux-colors-solarized'
#set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'jimeh/tmux-themepack'


# [[ Tmux Plugin Options ]]
#themepack
# set -g @themepack 'powerline/block/cyan'
set -g @themepack 'powerline/block/yellow'
#set -g @colors-solarized 'dark'
#set -g @continuum-restore 'on' # Restore environment on tmux server start
#set -g @resurrect-capture-pane-contents 'on' # Restore pane contents
#set -g @resurrect-strategy-vim 'session'     # Restore vim sessions, must use :Obsession first
#set -g @resurrect-processes 'ssh psql python'

# [[ COPY PASTE ]]
#set-option -g default-command "reattach-to-user-namespace -l bash"
set-option -g default-command "reattach-to-user-namespace -l zsh"
#set -g set-clipboard on


## Use vim keybindings in copy mode
#setw -g mode-keys vi

## Setup 'v' to begin selection as in Vim
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
#bind-key -Tcopy-mode-vi 'y' send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
#bind-key -Tcopy-mode-vi Enter send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
##bind-key -Tcopy-mode-vi 'y' send -X copy-selection
##bind-key -t vi-copy y copy-pipe "pbcopy"
##
## Copy
## Update default binding of `Enter` to also use copy-pipe
bind-key -Tcopy-mode-vi 'C-v' send -X rectangle-toggle
#bind-key -Tcopy-mode-vi 'V' send -X select-line
bind-key -Tcopy-mode-vi Escape send -X cancel


# From https://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
#bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
############################################################################

# Tmux Plugin Manager -- keep this line at the very bottom of the config
# Install plugins with <tmux-prefix>+I
# Update plugins with <tmux-prefix>+U
run '~/.tmux/plugins/tpm/tpm'
